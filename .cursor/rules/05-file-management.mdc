---
alwaysApply: true
description: 05-file-management
---


# Gestion des Fichiers et Formats

## Formats Supportés

### Documents
- **PDF** : documents Adobe PDF
- **DOCX** : documents Microsoft Word
- **PPTX** : présentations Microsoft PowerPoint

### Images
- **PNG** : images PNG
- **JPEG/JPG** : images JPEG
- **AVIF** : images AVIF

## Méthodes d'Entrée

### 1. URL de Document
```python
from mistralai import DocumentURLChunk

document = DocumentURLChunk(
    document_url="https://example.com/document.pdf"
)
```

### 2. URL d'Image
```python
from mistralai import ImageURLChunk

image = ImageURLChunk(
    image_url="https://example.com/image.png"
)
```

### 3. Encodage Base64
```python
import base64

def encode_file(file_path):
    with open(file_path, "rb") as file:
        return base64.b64encode(file.read()).decode('utf-8')

# Pour PDF
base64_pdf = encode_file("document.pdf")
document = DocumentURLChunk(
    document_url=f"data:application/pdf;base64,{base64_pdf}"
)

# Pour image
base64_image = encode_file("image.png")
image = ImageURLChunk(
    image_url=f"data:image/png;base64,{base64_image}"
)
```

### 4. Upload de Fichier
```python
# Upload du fichier
uploaded_file = client.files.upload(
    file={
        "file_name": "document.pdf",
        "content": open("document.pdf", "rb"),
    },
    purpose="ocr"
)

# Récupération de l'URL signée
signed_url = client.files.get_signed_url(file_id=uploaded_file.id)

# Utilisation
document = DocumentURLChunk(document_url=signed_url.url)
```

## Validation des Fichiers

### Vérification de l'Existence
```python
import os

def validate_file_path(file_path):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Le fichier {file_path} n'existe pas")
    return True
```

### Vérification du Format
```python
def validate_file_format(file_path, allowed_extensions):
    file_extension = os.path.splitext(file_path)[1].lower()
    if file_extension not in allowed_extensions:
        raise ValueError(f"Format non supporté: {file_extension}")
    return True

# Utilisation
allowed_docs = ['.pdf', '.docx', '.pptx']
allowed_images = ['.png', '.jpg', '.jpeg', '.avif']
```

### Vérification de la Taille
```python
def validate_file_size(file_path, max_size_mb=50):
    file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
    if file_size > max_size_mb:
        raise ValueError(f"Fichier trop volumineux: {file_size:.2f}MB")
    return True
```

## Gestion des Erreurs de Fichier

### Erreurs Communes
```python
try:
    response = client.ocr.process(
        model="mistral-ocr-latest",
        document=document
    )
except FileNotFoundError:
    print("Fichier non trouvé")
except ValueError as e:
    print(f"Erreur de validation: {e}")
except Exception as e:
    print(f"Erreur inattendue: {e}")
```

## Bonnes Pratiques

### Organisation des Fichiers
- Utiliser des noms de fichiers descriptifs
- Organiser les fichiers par type ou projet
- Implémenter un système de nettoyage automatique

### Sécurité
- Valider les URLs avant utilisation
- Vérifier les permissions de fichiers
- Ne pas exposer de chemins sensibles

### Performance
- Utiliser des fichiers de taille raisonnable
- Implémenter un cache pour les fichiers fréquemment utilisés
- Traiter les gros fichiers par chunks si nécessaire

### Logging
```python
import logging

logging.info(f"Traitement du fichier: {file_path}")
logging.debug(f"Format détecté: {file_extension}")
logging.error(f"Erreur lors du traitement: {error}")
```
