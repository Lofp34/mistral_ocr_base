#!/usr/bin/env python3
"""
Interface graphique pour l'extracteur de factures Mistral OCR
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import json
import sys
from pathlib import Path
import os

# Ajout du r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent.parent))

from services.invoice_extractor import InvoiceExtractor
from utils.file_utils import validate_file_path, validate_file_format

class InvoiceExtractorGUI:
    """Interface graphique pour l'extracteur de factures"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("Extracteur de Factures - Mistral OCR")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Variables
        self.pdf_path = tk.StringVar()
        self.output_dir = tk.StringVar(value="data/output")
        self.extractor = None
        self.processing = False
        
        # Configuration du style
        self.setup_styles()
        
        # Cr√©ation de l'interface
        self.create_widgets()
        
        # Initialisation de l'extracteur
        self.initialize_extractor()
    
    def setup_styles(self):
        """Configure les styles de l'interface"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configuration des couleurs
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), foreground='#2c3e50')
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'), foreground='#34495e')
        style.configure('Success.TLabel', foreground='#27ae60')
        style.configure('Error.TLabel', foreground='#e74c3c')
        style.configure('Info.TLabel', foreground='#3498db')
    
    def create_widgets(self):
        """Cr√©e les widgets de l'interface"""
        
        # Titre principal
        title_frame = tk.Frame(self.root, bg='#f0f0f0')
        title_frame.pack(fill='x', padx=20, pady=10)
        
        title_label = ttk.Label(title_frame, text="üöÄ Extracteur de Factures - Mistral OCR", style='Title.TLabel')
        title_label.pack()
        
        # Section de s√©lection de fichier
        self.create_file_section()
        
        # Section des actions
        self.create_actions_section()
        
        # Section de statut
        self.create_status_section()
        
        # Section de r√©sultats
        self.create_results_section()
    
    def create_file_section(self):
        """Cr√©e la section de s√©lection de fichier"""
        file_frame = ttk.LabelFrame(self.root, text="üìÅ S√©lection du fichier PDF", padding=10)
        file_frame.pack(fill='x', padx=20, pady=10)
        
        # S√©lection de fichier
        file_select_frame = tk.Frame(file_frame)
        file_select_frame.pack(fill='x', pady=5)
        
        ttk.Label(file_select_frame, text="Fichier PDF:").pack(side='left')
        ttk.Entry(file_select_frame, textvariable=self.pdf_path, width=50).pack(side='left', padx=5)
        ttk.Button(file_select_frame, text="Parcourir", command=self.browse_file).pack(side='left', padx=5)
        
        # R√©pertoire de sortie
        output_frame = tk.Frame(file_frame)
        output_frame.pack(fill='x', pady=5)
        
        ttk.Label(output_frame, text="Sortie:").pack(side='left')
        ttk.Entry(output_frame, textvariable=self.output_dir, width=50).pack(side='left', padx=5)
        ttk.Button(output_frame, text="Parcourir", command=self.browse_output_dir).pack(side='left', padx=5)
    
    def create_actions_section(self):
        """Cr√©e la section des actions"""
        actions_frame = ttk.LabelFrame(self.root, text="‚ö° Actions disponibles", padding=10)
        actions_frame.pack(fill='x', padx=20, pady=10)
        
        # Boutons d'action
        buttons_frame = tk.Frame(actions_frame)
        buttons_frame.pack(fill='x', pady=5)
        
        # Premi√®re ligne
        row1 = tk.Frame(buttons_frame)
        row1.pack(fill='x', pady=5)
        
        self.extract_btn = ttk.Button(row1, text="üìã Extraction compl√®te", 
                                     command=lambda: self.run_action("extract"))
        self.extract_btn.pack(side='left', padx=5)
        
        self.analyze_btn = ttk.Button(row1, text="üîç Analyse structure", 
                                     command=lambda: self.run_action("analyze"))
        self.analyze_btn.pack(side='left', padx=5)
        
        # Deuxi√®me ligne
        row2 = tk.Frame(buttons_frame)
        row2.pack(fill='x', pady=5)
        
        self.text_btn = ttk.Button(row2, text="üìÑ Texte brut", 
                                  command=lambda: self.run_action("raw_text"))
        self.text_btn.pack(side='left', padx=5)
        
        self.annotations_btn = ttk.Button(row2, text="‚úçÔ∏è D√©tection annotations", 
                                         command=lambda: self.run_action("annotations"))
        self.annotations_btn.pack(side='left', padx=5)
        
        # Bouton pour tout faire
        self.all_btn = ttk.Button(buttons_frame, text="üîÑ Tout traiter", 
                                 command=self.run_all_actions)
        self.all_btn.pack(pady=10)
    
    def create_status_section(self):
        """Cr√©e la section de statut"""
        status_frame = ttk.LabelFrame(self.root, text="üìä Statut", padding=10)
        status_frame.pack(fill='x', padx=20, pady=10)
        
        # Barre de progression
        self.progress = ttk.Progressbar(status_frame, mode='indeterminate')
        self.progress.pack(fill='x', pady=5)
        
        # Label de statut
        self.status_label = ttk.Label(status_frame, text="Pr√™t", style='Info.TLabel')
        self.status_label.pack(pady=5)
    
    def create_results_section(self):
        """Cr√©e la section de r√©sultats"""
        results_frame = ttk.LabelFrame(self.root, text="üìã R√©sultats", padding=10)
        results_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Zone de texte pour les r√©sultats
        self.results_text = scrolledtext.ScrolledText(results_frame, height=15, wrap='word')
        self.results_text.pack(fill='both', expand=True)
        
        # Boutons pour les r√©sultats
        results_buttons = tk.Frame(results_frame)
        results_buttons.pack(fill='x', pady=5)
        
        ttk.Button(results_buttons, text="üìÅ Ouvrir dossier sortie", 
                  command=self.open_output_folder).pack(side='left', padx=5)
        ttk.Button(results_buttons, text="üóëÔ∏è Effacer r√©sultats", 
                  command=self.clear_results).pack(side='left', padx=5)
    
    def initialize_extractor(self):
        """Initialise l'extracteur"""
        try:
            self.extractor = InvoiceExtractor()
            self.update_status("‚úÖ Extracteur initialis√© avec succ√®s", "success")
        except Exception as e:
            self.update_status(f"‚ùå Erreur d'initialisation: {e}", "error")
    
    def browse_file(self):
        """Ouvre le dialogue de s√©lection de fichier"""
        filename = filedialog.askopenfilename(
            title="S√©lectionner un fichier PDF",
            filetypes=[("Fichiers PDF", "*.pdf"), ("Tous les fichiers", "*.*")]
        )
        if filename:
            self.pdf_path.set(filename)
            self.validate_file()
    
    def browse_output_dir(self):
        """Ouvre le dialogue de s√©lection de r√©pertoire de sortie"""
        directory = filedialog.askdirectory(title="S√©lectionner le r√©pertoire de sortie")
        if directory:
            self.output_dir.set(directory)
    
    def validate_file(self):
        """Valide le fichier s√©lectionn√©"""
        file_path = self.pdf_path.get()
        if not file_path:
            return
        
        try:
            validate_file_path(file_path)
            validate_file_format(file_path, ['.pdf'])
            
            # Afficher les informations du fichier
            file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
            self.update_status(f"‚úÖ Fichier valide: {Path(file_path).name} ({file_size:.2f} MB)", "success")
            
        except Exception as e:
            self.update_status(f"‚ùå Fichier invalide: {e}", "error")
    
    def run_action(self, action_type):
        """Ex√©cute une action sp√©cifique"""
        if self.processing:
            messagebox.showwarning("Traitement en cours", "Veuillez attendre la fin du traitement en cours.")
            return
        
        if not self.pdf_path.get():
            messagebox.showerror("Erreur", "Veuillez s√©lectionner un fichier PDF.")
            return
        
        # D√©marrer le traitement dans un thread s√©par√©
        thread = threading.Thread(target=self._process_action, args=(action_type,))
        thread.daemon = True
        thread.start()
    
    def run_all_actions(self):
        """Ex√©cute toutes les actions"""
        if self.processing:
            messagebox.showwarning("Traitement en cours", "Veuillez attendre la fin du traitement en cours.")
            return
        
        if not self.pdf_path.get():
            messagebox.showerror("Erreur", "Veuillez s√©lectionner un fichier PDF.")
            return
        
        # D√©marrer le traitement dans un thread s√©par√©
        thread = threading.Thread(target=self._process_all_actions)
        thread.daemon = True
        thread.start()
    
    def _process_action(self, action_type):
        """Traite une action sp√©cifique"""
        self.processing = True
        self.update_status("üîÑ Traitement en cours...", "info")
        self.progress.start()
        self.disable_buttons()
        
        try:
            pdf_path = self.pdf_path.get()
            output_dir = self.output_dir.get()
            
            # Cr√©er le r√©pertoire de sortie s'il n'existe pas
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            if action_type == "extract":
                self._extract_invoice_lines(pdf_path, output_dir)
            elif action_type == "analyze":
                self._analyze_invoice_structure(pdf_path, output_dir)
            elif action_type == "raw_text":
                self._extract_raw_text(pdf_path, output_dir)
            elif action_type == "annotations":
                self._detect_annotations(pdf_path, output_dir)
            
        except Exception as e:
            self.update_status(f"‚ùå Erreur: {e}", "error")
            messagebox.showerror("Erreur", f"Une erreur s'est produite:\n{e}")
        
        finally:
            self.processing = False
            self.progress.stop()
            self.enable_buttons()
    
    def _process_all_actions(self):
        """Traite toutes les actions"""
        self.processing = True
        self.update_status("üîÑ Traitement complet en cours...", "info")
        self.progress.start()
        self.disable_buttons()
        
        try:
            pdf_path = self.pdf_path.get()
            output_dir = self.output_dir.get()
            
            # Cr√©er le r√©pertoire de sortie s'il n'existe pas
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            results = []
            
            # Extraction compl√®te
            self.update_status("üìã Extraction des lignes de facturation...", "info")
            result = self.extractor.extract_invoice_lines(pdf_path)
            if result.success:
                output_file = Path(output_dir) / f"{Path(pdf_path).stem}_extraction.json"
                self.extractor.save_extraction_result(result, str(output_file))
                results.append(f"‚úÖ Extraction: {output_file.name}")
            else:
                results.append(f"‚ùå Extraction: {result.error_message}")
            
            # Analyse de structure
            self.update_status("üîç Analyse de la structure...", "info")
            result = self.extractor.analyze_invoice_structure(pdf_path)
            if result.success:
                output_file = Path(output_dir) / f"{Path(pdf_path).stem}_analysis.json"
                self.extractor.save_extraction_result(result, str(output_file))
                results.append(f"‚úÖ Analyse: {output_file.name}")
            else:
                results.append(f"‚ùå Analyse: {result.error_message}")
            
            # Texte brut
            self.update_status("üìÑ Extraction du texte brut...", "info")
            try:
                raw_text = self.extractor.extract_raw_text(pdf_path)
                output_file = Path(output_dir) / f"{Path(pdf_path).stem}_text.txt"
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(raw_text)
                results.append(f"‚úÖ Texte brut: {output_file.name}")
            except Exception as e:
                results.append(f"‚ùå Texte brut: {e}")
            
            # D√©tection d'annotations
            self.update_status("‚úçÔ∏è D√©tection d'annotations...", "info")
            result = self.extractor.detect_annotations_via_qna(pdf_path)
            if result.success:
                output_file = Path(output_dir) / f"{Path(pdf_path).stem}_annotations_qna.json"
                self.extractor.save_extraction_result(result, str(output_file))
                results.append(f"‚úÖ Annotations: {output_file.name}")
            else:
                results.append(f"‚ùå Annotations: {result.error_message}")
            
            # Afficher les r√©sultats
            self.update_status("‚úÖ Traitement complet termin√©!", "success")
            self.display_results("\n".join(results))
            
        except Exception as e:
            self.update_status(f"‚ùå Erreur: {e}", "error")
            messagebox.showerror("Erreur", f"Une erreur s'est produite:\n{e}")
        
        finally:
            self.processing = False
            self.progress.stop()
            self.enable_buttons()
    
    def _extract_invoice_lines(self, pdf_path, output_dir):
        """Extrait les lignes de facturation"""
        result = self.extractor.extract_invoice_lines(pdf_path)
        
        if result.success:
            output_file = Path(output_dir) / f"{Path(pdf_path).stem}_extraction.json"
            self.extractor.save_extraction_result(result, str(output_file))
            
            self.update_status(f"‚úÖ Extraction r√©ussie: {output_file.name}", "success")
            self.display_extraction_results(result)
        else:
            self.update_status(f"‚ùå Erreur d'extraction: {result.error_message}", "error")
    
    def _analyze_invoice_structure(self, pdf_path, output_dir):
        """Analyse la structure de la facture"""
        result = self.extractor.analyze_invoice_structure(pdf_path)
        
        if result.success:
            output_file = Path(output_dir) / f"{Path(pdf_path).stem}_analysis.json"
            self.extractor.save_extraction_result(result, str(output_file))
            
            self.update_status(f"‚úÖ Analyse r√©ussie: {output_file.name}", "success")
            self.display_analysis_results(result)
        else:
            self.update_status(f"‚ùå Erreur d'analyse: {result.error_message}", "error")
    
    def _extract_raw_text(self, pdf_path, output_dir):
        """Extrait le texte brut"""
        try:
            raw_text = self.extractor.extract_raw_text(pdf_path)
            output_file = Path(output_dir) / f"{Path(pdf_path).stem}_text.txt"
            
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(raw_text)
            
            self.update_status(f"‚úÖ Texte extrait: {output_file.name}", "success")
            self.display_text_results(raw_text, output_file)
        except Exception as e:
            self.update_status(f"‚ùå Erreur d'extraction: {e}", "error")
    
    def _detect_annotations(self, pdf_path, output_dir):
        """D√©tecte les annotations manuscrites"""
        result = self.extractor.detect_annotations_via_qna(pdf_path)
        
        if result.success:
            output_file = Path(output_dir) / f"{Path(pdf_path).stem}_annotations_qna.json"
            self.extractor.save_extraction_result(result, str(output_file))
            
            self.update_status(f"‚úÖ Annotations d√©tect√©es: {output_file.name}", "success")
            self.display_annotation_results(result)
        else:
            self.update_status(f"‚ùå Erreur de d√©tection: {result.error_message}", "error")
    
    def display_extraction_results(self, result):
        """Affiche les r√©sultats d'extraction"""
        if result.invoice_data and hasattr(result.invoice_data, 'lines'):
            lines = result.invoice_data.lines
            output = f"üìã EXTRACTION DES LIGNES DE FACTURATION\n"
            output += f"{'='*50}\n"
            output += f"‚úÖ Succ√®s: {result.success}\n"
            output += f"‚è±Ô∏è Temps: {result.processing_time:.2f}s\n"
            output += f"üìä Nombre de lignes: {len(lines)}\n\n"
            
            for i, line in enumerate(lines[:10], 1):  # Afficher les 10 premi√®res lignes
                output += f"{i}. {line.description}\n"
                output += f"   Quantit√©: {line.quantity} {line.unit or 'unit√©'}\n"
                output += f"   Prix: {line.unit_price}‚Ç¨\n"
                output += f"   Total: {line.total}‚Ç¨\n\n"
            
            if len(lines) > 10:
                output += f"... et {len(lines) - 10} lignes suppl√©mentaires\n"
            
            self.display_results(output)
    
    def display_analysis_results(self, result):
        """Affiche les r√©sultats d'analyse"""
        if result.invoice_data:
            data = result.invoice_data
            output = f"üîç ANALYSE DE STRUCTURE\n"
            output += f"{'='*50}\n"
            output += f"‚úÖ Succ√®s: {result.success}\n"
            output += f"‚è±Ô∏è Temps: {result.processing_time:.2f}s\n"
            output += f"üìÑ Type: {data.document_type}\n"
            output += f"üè¢ Vendeur: {data.vendor_name}\n"
            output += f"üìÖ Date: {data.invoice_date}\n"
            output += f"üí∞ Montant total: {data.total_amount} {data.currency}\n"
            output += f"üìä Colonnes identifi√©es: {', '.join(data.columns_identified)}\n"
            output += f"üìã Exemples de lignes: {len(data.sample_lines)}\n\n"
            
            for i, sample in enumerate(data.sample_lines[:5], 1):
                output += f"{i}. {sample}\n"
            
            self.display_results(output)
    
    def display_text_results(self, text, output_file):
        """Affiche les r√©sultats d'extraction de texte"""
        output = f"üìÑ TEXTE BRUT EXTRAIT\n"
        output += f"{'='*50}\n"
        output += f"üìÅ Fichier: {output_file.name}\n"
        output += f"üìè Longueur: {len(text)} caract√®res\n\n"
        output += f"üìã APER√áU:\n"
        output += f"{'-'*30}\n"
        output += text[:500] + "..." if len(text) > 500 else text
        output += f"\n{'-'*30}\n"
        
        self.display_results(output)
    
    def display_annotation_results(self, result):
        """Affiche les r√©sultats de d√©tection d'annotations"""
        if result.invoice_data:
            data = result.invoice_data
            output = f"‚úçÔ∏è D√âTECTION D'ANNOTATIONS MANUSCRITES\n"
            output += f"{'='*50}\n"
            output += f"‚úÖ Succ√®s: {result.success}\n"
            output += f"‚è±Ô∏è Temps: {result.processing_time:.2f}s\n"
            output += f"üîç M√©thode: {data.detection_method}\n"
            output += f"üìä Annotations d√©tect√©es: {data.annotations_detected}\n\n"
            
            if data.handwritten_annotations:
                output += f"‚úçÔ∏è ANNOTATIONS D√âTECT√âES:\n"
                for i, annotation in enumerate(data.handwritten_annotations, 1):
                    output += f"{i}. [{annotation.annotation_type.upper()}] {annotation.text}\n"
                    if annotation.payment_date:
                        output += f"   üìÖ Date de paiement: {annotation.payment_date}\n"
                    if annotation.purchase_purpose:
                        output += f"   üéØ Objectif: {annotation.purchase_purpose}\n"
                    output += f"   üéØ Confiance: {annotation.confidence:.1%}\n\n"
            else:
                output += f"‚úçÔ∏è Aucune annotation manuscrite d√©tect√©e\n\n"
            
            output += f"‚ùì QUESTIONS POS√âES:\n"
            for i, question in enumerate(data.questions_asked, 1):
                output += f"{i}. {question}\n"
            
            self.display_results(output)
    
    def display_results(self, text):
        """Affiche du texte dans la zone de r√©sultats"""
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(1.0, text)
    
    def update_status(self, message, status_type="info"):
        """Met √† jour le statut"""
        style_map = {
            "success": "Success.TLabel",
            "error": "Error.TLabel",
            "info": "Info.TLabel"
        }
        
        self.status_label.configure(text=message, style=style_map.get(status_type, "Info.TLabel"))
        self.root.update_idletasks()
    
    def disable_buttons(self):
        """D√©sactive les boutons pendant le traitement"""
        self.extract_btn.configure(state='disabled')
        self.analyze_btn.configure(state='disabled')
        self.text_btn.configure(state='disabled')
        self.annotations_btn.configure(state='disabled')
        self.all_btn.configure(state='disabled')
    
    def enable_buttons(self):
        """R√©active les boutons apr√®s le traitement"""
        self.extract_btn.configure(state='normal')
        self.analyze_btn.configure(state='normal')
        self.text_btn.configure(state='normal')
        self.annotations_btn.configure(state='normal')
        self.all_btn.configure(state='normal')
    
    def open_output_folder(self):
        """Ouvre le dossier de sortie"""
        output_dir = self.output_dir.get()
        if output_dir and Path(output_dir).exists():
            os.system(f'open "{output_dir}"')  # macOS
        else:
            messagebox.showwarning("Dossier introuvable", "Le dossier de sortie n'existe pas.")
    
    def clear_results(self):
        """Efface les r√©sultats"""
        self.results_text.delete(1.0, tk.END)
        self.update_status("Pr√™t", "info")

def main():
    """Fonction principale"""
    root = tk.Tk()
    app = InvoiceExtractorGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main() 